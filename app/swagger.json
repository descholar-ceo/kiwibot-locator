{
    "swagger": "2.0",
    "info": {
      "title": "Kiwibot Locator API Docs",
      "description": "This is the `Kiwibot Locator API Docs`.  You can find out more about Kiwibot at [https://www.kiwibot.com/](https://www.kiwibot.com/)",
      "contact": {
        "website": "https://www.kiwibot.com/contact"
      },
      "version": "1.0.0"
    },
    "servers": [
      {
        "url": "http://localhost:4000/api"
      }
    ],
    "tags": [
      {
        "name": "Kiwibot-locator API",
        "description": "Everything about a kiwibot"
      }
    ],
    "paths": {
      "/orders": {
        "post": {
          "tags": [
            "orders"
          ],
          "summary": "Create a new order",
          "operationId": "createOrder",
          "requestBody": {
            "description": "Order object that needed to be added to the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "required": true
          },
          "responses": {
            "400": {
              "description": "Validation errors",
              "content": {}
            },
            "201": {
              "description": "Order created",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        },
        "get": {
          "tags": [
            "orders"
          ],
          "summary": "Get all orders",
          "operationId": "getOrders",
          "responses": {
            "200": {
              "description": "Orders retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            },
            "404": {
              "description": "No Orders found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Orders"
                  }
                }
              }
            }
          },
          "x-codegen-response-body-name": "body"
        }
      },
      "/orders/{id}": {
        "put": {
          "tags": [
            "orders"
          ],
          "summary": "Update an order from the database",
          "operationId": "updateOrder",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Order id to update",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Order object that needs to be updated from the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "required": true
          },
          "responses": {
            "400": {
              "description": "Validation errors",
              "content": {}
            },
            "500": {
              "description": "Update failure",
              "content": {}
            },
            "200": {
              "description": "Update success",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        },
        "get": {
          "tags": [
            "orders"
          ],
          "summary": "get an order by id",
          "operationId": "getOrderById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Order id to get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Order not found",
              "content": {}
            },
            "200": {
              "description": "Order retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/orders/creator/{id}": {
        "get": {
          "tags": [
            "orders"
          ],
          "summary": "get all orders by creator id",
          "operationId": "getOrdersByCreatorId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Creator id to whom we get his orders get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Order not found",
              "content": {}
            },
            "200": {
              "description": "Orders retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/orders/zone/{id}": {
        "get": {
          "tags": [
            "orders"
          ],
          "summary": "get all orders by zone id",
          "operationId": "getOrdersByZoneId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Zone id to which we get their orders get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "query": [{
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }],
          "responses": {
            "404": {
              "description": "Order not found",
              "content": {}
            },
            "200": {
              "description": "Orders retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/bots": {
        "post": {
          "tags": [
            "bots"
          ],
          "summary": "Create a new bot",
          "operationId": "createBot",
          "requestBody": {
            "description": "Bot object that needed to be added to the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bot"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Bot"
                }
              }
            },
            "required": true
          },
          "responses": {
            "400": {
              "description": "Validation errors",
              "content": {}
            },
            "201": {
              "description": "Bot created",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        },
        "get": {
          "tags": [
            "bots"
          ],
          "summary": "Get all bots",
          "operationId": "getBots",
          "responses": {
            "200": {
              "description": "Bots retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Bot"
                  }
                }
              }
            },
            "404": {
              "description": "No Bots found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Bots"
                  }
                }
              }
            }
          },
          "x-codegen-response-body-name": "body"
        }
      },
      "/bots/{id}": {
        "put": {
          "tags": [
            "bots"
          ],
          "summary": "Update an bot from the database",
          "operationId": "updateBot",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Bot id to update",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Bot object that needs to be updated from the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bot"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Bot"
                }
              }
            },
            "required": true
          },
          "responses": {
            "400": {
              "description": "Validation errors",
              "content": {}
            },
            "500": {
              "description": "Update failure",
              "content": {}
            },
            "200": {
              "description": "Update success",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        },
        "get": {
          "tags": [
            "bots"
          ],
          "summary": "get an bot by id",
          "operationId": "getBotById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Bot id to get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Bot not found",
              "content": {}
            },
            "200": {
              "description": "Bot retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/bots/zone/{id}": {
        "get": {
          "tags": [
            "bots"
          ],
          "summary": "get all bots by zone id",
          "operationId": "getBotsByZoneId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Zone id to which we get their bots get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "query": [{
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }],
          "responses": {
            "404": {
              "description": "Bot not found",
              "content": {}
            },
            "200": {
              "description": "Bots retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/bot-orders": {
        "post": {
          "tags": [
            "bot-orders"
          ],
          "summary": "Assign a bot to an order",
          "operationId": "assignBotToOrder",
          "requestBody": {
            "description": "BotOrder object that needed to be added to the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotOrder"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BotOrder"
                }
              }
            },
            "required": true
          },
          "responses": {
            "400": {
              "description": "Validation errors",
              "content": {}
            },
            "201": {
              "description": "Bot assigned to an order",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        },
        "get": {
          "tags": [
            "bot-orders"
          ],
          "summary": "Get all assignments of bot and orders",
          "operationId": "getBotOrders",
          "responses": {
            "200": {
              "description": "Assignment retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BotOrder"
                  }
                }
              }
            },
            "404": {
              "description": "No assigment found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BotOrder"
                  }
                }
              }
            }
          },
          "x-codegen-response-body-name": "body"
        }
      },
      "/bot-orders/{id}": {
        "delete": {
          "tags": [
            "bot-orders"
          ],
          "summary": "Remove an assignment of a bot-order from the database",
          "operationId": "removeBotOrder",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "BotOrder ID to remove",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "500": {
              "description": "Removal failure",
              "content": {}
            },
            "200": {
              "description": "Removal success",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        },
        "get": {
          "tags": [
            "bot-orders"
          ],
          "summary": "get an assigment of a bot-order by id",
          "operationId": "getBotOrderById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "BotOrder ID to get",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "BotOrder not found",
              "content": {}
            },
            "200": {
              "description": "BotOrder retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/bot-orders/bot/{botId}": {
        "get": {
          "tags": [
            "bot-orders"
          ],
          "summary": "get all orders assigned to a bot by sending botId",
          "operationId": "getBotOrdersByBotId",
          "parameters": [
            {
              "name": "botId",
              "in": "path",
              "description": "Bot ID to which we get their orders",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "query": [{
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }],
          "responses": {
            "404": {
              "description": "Bot not found",
              "content": {}
            },
            "200": {
              "description": "Bots retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/bot/{botId}/suggestion-by-distance": {
        "get": {
          "tags": [
            "bot-orders"
          ],
          "summary": "get all orders to suggest for a given bot by sending a botId  depending on the distance between that bot and and that order from the `bot location` and `order pickup location`",
          "operationId": "getOrdersSuggestionForBotByDistance",
          "parameters": [
            {
              "name": "botId",
              "in": "path",
              "description": "Bot ID to which we get their suggested orders by distance",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "query": [{
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }],
          "responses": {
            "400": {
              "description": "[Order not pending] or [Bot not available]",
              "content": {}
            },
            "404": {
              "description": "Bot or Order not found",
              "content": {}
            },
            "200": {
              "description": "Bots retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/bot/{botId}/suggestion-by-zone": {
        "get": {
          "tags": [
            "bot-orders"
          ],
          "summary": "get all orders to suggest for a given bot by sending a botId  depending on the zone and distance between that bot and and that order from the `bot location` and `order pickup location`, the bots retrieved will be coming from the same zone with the orders.",
          "operationId": "getOrdersSuggestionForBotByZone",
          "parameters": [
            {
              "name": "botId",
              "in": "path",
              "description": "Bot ID to which we get their suggested orders by distance",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "query": [{
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }],
          "responses": {
            "400": {
              "description": "[Order not pending] or [Bot not available]",
              "content": {}
            },
            "404": {
              "description": "Bot or Order not found",
              "content": {}
            },
            "200": {
              "description": "Bots retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/bot-orders/order/{orderId}": {
        "get": {
          "tags": [
            "bot-orders"
          ],
          "summary": "get all bots assigned to an order by sending orderId",
          "operationId": "getBotsByOrderId",
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "Order ID to which we get their bots",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "query": [{
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }],
          "responses": {
            "404": {
              "description": "Bot not found",
              "content": {}
            },
            "200": {
              "description": "Bots retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/order/{orderId}/suggestion-by-distance": {
        "get": {
          "tags": [
            "bot-orders"
          ],
          "summary": "get all bots to suggest for a given order by sending a orderId depending on the distance between that bot and and that order from the `bot location` and `order pickup location`",
          "operationId": "getBotsSuggestionForOrderByDistance",
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "Order ID to which we get their suggested bots by distance",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "query": [{
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }],
          "responses": {
            "400": {
              "description": "[Order not pending] or [Bot not available]",
              "content": {}
            },
            "404": {
              "description": "Bot or Order not found",
              "content": {}
            },
            "200": {
              "description": "Bots retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/order/{orderId}/suggestion-by-zone": {
        "get": {
          "tags": [
            "bot-orders"
          ],
          "summary": "get all bots to suggest for a given order by sending a orderId depending on zone and the distance between that bot and and that order from the `bot location` and `order pickup location`, orders retrieved will be coming from the same zone as the bot",
          "operationId": "getBotsSuggestionForOrderByZone",
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "Order ID to which we get their suggested bots by distance",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "query": [{
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit number",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }],
          "responses": {
            "400": {
              "description": "[Order not pending] or [Bot not available]",
              "content": {}
            },
            "404": {
              "description": "Bot or Order not found",
              "content": {}
            },
            "200": {
              "description": "Bots retrieved",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      }
    },
    "components": {
      "schemas": {
        "Bot": {
          "type": "object",
          "required": [
            "zone_id",
            "location"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "string"
            },
            "zone_id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "location": {
              "type": "object",
              "properties": {
                "lat": {
                  "type": "number",
                  "format": "double"
                },
                "lon": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "xml": {
            "name": "Bot"
          }
        },
        "Order": {
          "required": [
            "pickup",
            "dropoff",
            "zone_id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "state": {
              "type": "string"
            },
            "creation_date": {
              "type": "string",
              "format": "date-time"
            },
            "zone_id": {
              "type": "string",
              "example": "4556"
            },
            "pickup": {
              "required": [
                "pickup_lat",
                "pickup_lon"
              ],
              "type": "object",
              "properties": {
                "pickup_lat": {
                  "type": "number",
                  "format": "double"
                },
                "pickup_lon": {
                  "type": "number",
                  "format": "double"
                }
              },
              "xml": {
                "name": "pickup",
                "wrapped": true
              }
            }
          },
          "xml": {
            "name": "Order"
          }
        },
        "BotOrder": {
          "required": [
            "bot_id",
            "order_id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "bot_id": {
              "type": "string"
            },
            "order_id": {
              "type": "string",
              "format": "date-time"
            }
          },
          "xml": {
            "name": "BotOrder"
          }
        },
        "ApiResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "integer",
              "format": "int32"
            },
            "message": {
              "type": "string"
            }
          }
        }
      }
    }
  }
  